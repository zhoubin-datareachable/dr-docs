openapi: 3.0.3

info:
  version: 0.0.1
  title: Dashboard Backend Project - Entry Page APIs
  description: >-
    首屏加载API，包含具体的请求格式与响应格式
    <br/>
    <br/>
    **项目服务器访问域名&根目录:** https://dashboard.dev.datareachable.net/
    <br/>
    <br/>
    **Github项目地址:**
      - [Dashboard API Server](https://github.com/dataReachable/dr_Back_Dashboard)
  contact:
    name: Backend Team
    email: mengming.li@datareachable.com

servers:
  - url: "https://dashboard.dev.datareachable.net/"
    description: Sydney Development Cluster for Dashboard Project

paths:
  /entry:
    get:
      tags:
        - Protected App Entrypoint
      summary: Entrance URL
      description: For each application under the OpenID Connect SSO system, browser should always directly visit the backend via this URL first to check whether the user is authorized to access the protected application/page(s).
      responses:
        "302":
          description: Redirect the user browser from the application to the OpenID Connect provider.
        "500":
          description: Internal server errors.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Res_GenericInternalError"

  /api/v1/entry/info:
    post:
      tags:
        - Entry Page Info Fetching
      summary: Fetch profile information at entry page
      description: After user logging in via OpenID Connect provider, fetch user-related info for first page rendering
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Req_EntryInfo"
      responses:
        "200":
          description: Entry page information has been successfully fetched.
          headers:
            DR-AUTH:
              description: The Json web token (JWT) issued by the backend. <br/> Frontend should store this value and attach it to request header for privileged API requests.
              schema:
                type: string

          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Res_Generic"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Res_EntryInfo_Success"

        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Res_GenericBadFields"
        "500":
          description: Internal server errors.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Res_GenericInternalError"
    get:
      tags:
        - Entry Page Info Fetching
      summary: Only returns an error
      responses:
        "405":
          description: Wrong request method
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Res_WrongRequestMethod"

components:
  schemas:
    Res_Generic:
      type: object
      properties:
        code:
          type: number
          description: "A 6-digit status code."
          example: 200000
        message:
          type: string
          description: "A user-friendly message describing the status of the response."
          example: "Success!"

    Res_GenericBadFields:
      allOf:
        - $ref: "#/components/schemas/Res_Generic"
      example: { code: 400001, message: "The error of the fields will be described here." }

    Res_GenericInternalError:
      allOf:
        - $ref: "#/components/schemas/Res_Generic"
        - type: object
          properties:
            data:
              type: object
              description: The data payload of the response
              properties:
                error:
                  description: Details of the specific error, helpful to locate the error source.
                  type: string
      example: { code: 500000, message: "General error message", data: { error: "Details of the error goes here" } }

    Res_WrongRequestMethod:
      allOf:
        - $ref: "#/components/schemas/Res_Generic"
      example: { code: 405000, message: "You're using the completely wrong HTTP method!" }

    Res_Mobile:
      type: object
      description: User provided mobile number. If not provided, the field is `null`.
      properties:
        country:
          type: string
          description: The country code of the number we're sending to.
        number:
          type: string
          description: The actual mobile number of the user.
      example: { "country": "61", "number": "1234567890" }

    Res_Email:
      type: string
      description: User provided email address. If not provided, the field is `null`.
      example: "xxxx@datareachable.com"

    Req_EntryInfo:
      type: object
      properties:
        code:
          type: string
          description: The code extracted from the browser URL.
        session_state:
          type: string
          description: The session_state value extracted from the browser URL.
      example: { "code": "xxxxxxxxxx", "session_state": "xxxxxxxxxx" }

    Res_EntryInfo_Success:
      type: object
      properties:
        userinfo:
          required:
            - "sub"
            - "name"
          type: object
          properties:
            sub:
              type: string
              description: >-
                User universally unique id.
                <br/>
                **Must** be returned and contain value.
              example: "xxxxxxxxx-yyyyy_zzzzz"
            name:
              type: string
              description: >-
                User name.
                <br/>
                **Must** be returned and contain value.
              example: "John Doe"
            email:
              $ref: "#/components/schemas/Res_Email"
            mobile:
              $ref: "#/components/schemas/Res_Mobile"
            birthday:
              type: string
              format: date
              description: User birthday
              example: "1970-01-01"
            gender:
              type: string
              description: User gender
              example: "male"
            avatar:
              type: string
              description: User avatar public-readable URL
              example: "https://xxxxxx.aws.com"
