openapi: 3.0.3

info:
  version: v2.0
  title: 本文档展示最新版本 profile - UPU API 请求规范文档
  description: >-
    <br><HR>
    **项目服务器访问域名&根目录:** https://profile.dev.datareachable.net
    <br><HR>
    **Github项目地址:** [User Profile API Server](https://github.com/dataReachable/dr_Back_UserSystemProfile)
    <br><HR>
  contact:
    name: Backend Team
    email: jiasehng.jing@datareachable.com

servers:
  - url: "https://profile.dev.datareachable.net/api/v2"
    description: 公网调用地址
  - url: "http://192.168.2.48:3001/api/v2"
    description: 内网调用地址

tags:
  - name: Complete
    description: Already complate api document
  - name: Developing
    description: Wiriting api document on process

components:
  schemas:
    code:
      type: string
      description: 平台自定义的请求响应码 6 位 number 组成
    succeed:
      type: boolean
      description: 前端请求涉及到 update data 的时候需要返回的响应字段， 代表着 update 的结果， false 代表更新失败， true 代表更新成功.
    message:
      type: string
      description: 后端对请求响应结果的简要信息.
    organization_dri:
      type: string
      description: organization 的全局资源定位符
    organization_name:
      type: string
      description: organization 的名称，全局唯一且不能包含特殊字符(.?!除外)
    organization_email:
      type: string
      description: organization 的联系方式u之一——邮箱，初始邮箱一般都是该 organization 的创建者的邮箱，后期支持更改！
    organization_phone:
      type: object
      description: organization 的联系方式之一——电话
      properties:
        country:
          type: number
          description: 电话号码前的国家代码 例如中国[61]
        number:
          type: string
          description: 电话号码后的号码段
    organization_description:
      type: string
      description: organization 的简介，用于对 organization 进行简要的说明与介绍的文字性内容
    organization_status:
      type: string
      description: organization 的状态值，可选的有 private 和 public， 当为 private 的时候，该 organization 对外显示信息不可见， public 则对外可见，可被搜索到.
    organization_logo:
      type: string
      description: 一个可以被直接加载出来的 organization 的 LOGO AWS网络图片的地址
    talent_group_name:
      type: string
      description: talent_group 的名称， 不能包含特殊字符(.?!除外)，并且需要在同一个 organization 内部不重复
    talent_group_dri:
      type: string
      description: talent_group 的全局资源定位符， uuid 部分包含和其所在的 organization 的 uuid 并追加 6 位私有的 uuid
    talent_group_status:
      type: string
      description: talent_group 的状态描述， 可选值为 private 和 public ，同样，这个状态也标志着本 talent_group 在某些情景下的对外可见情况
    user_dri:
      type: string
      description: system user 的全局资源定位符
    user_name:
      type: string
      description: system user 的名称,在系统中需要全局唯一，并且不能包含特殊字符(.?!除外)，是登录系统凭据的一部分
    user_password:
      type: string
      description: system user 的登录密码， 目前仅仅用作与 user_name 搭配登录系统使用，且需要包含部分特殊字符等强校验规则，用于确保密码强度，在数据库中对密码进行加密(存储密文)保护用户信息
    user_gender:
      type: string
      description: system user 的性别，目前未作设定，尚待确认
    user_birthday:
      type: string
      description: system user 的生日，存储的时候为日期格式字符串，传输的时候使用时间戳传输
    user_email:
      type: string
      description: system user 的邮箱地址，默认为用户在系统中首次注册的时候使用的邮箱，此项在后续的系统中一定会存在，并且支持用户后期更改
    user_mobile:
      type: object
      description: system user 的联系方式之一——电话，该项在用户注册的时候不属于强制补全项， 属于用户的后期补充项，可以为 null.
      properties:
        country:
          type: string
          description: 电话号码前的国家代码
        number:
          type: string
          description: 电话号码的号码段
    user_avatar:
      type: string
      description: system user 的头像， 当用户上传头像到aws之后，用户的头像可加载的网络图片地址，在用户没有上传头像之前默认为 null ，由前端根据 organization name 使用组建生成字母头像.
    user_real_name:
      type: object
      description: 系统注册的用户的真实姓名
      properties:
        first_name:
          type: string
          description: 真实姓名的名字部分
        middle_name:
          type: string
          description: 真实姓名的中间名部分
        last_name:
          type: string
          description: 真实姓名的姓氏部分
    session_code:
      type: string
      description: 单一设备的识别码，用于阻止多设备验证的机器识别码，由前端生成，36位随机 uuid
    unlock_code:
      type: string
      description: 用户邮箱收到的用于解锁用户敏感信息修改的授权码
    verify_code:
      type: string
      description: 验证联系方式的时候获取到6位数字验证码


    #=======================
    res_400100:
      description: "获取 organization descriptions 参数错误响应"
      type: object
      properties:
        code:
          $ref: "#/components/schemas/code"
        message:
          $ref: "#/components/schemas/message"
      example:
        {
          code: 400100,
          message: "xxx 是必填字段，不可为空！"
        }

    res_403100:
      description: 当前 API 仅支持 organization 的 owner 操作
      type: object
      properties:
        code:
          $ref: "#/components/schemas/code"
        message:
          $ref: "#/components/schemas/message"
      example: {
        code: 403100,
        message: "The current operation only supports owner"
      }

    res_403200:
      description: 当前 API 仅支持 organization 的 owner 或者 admin 操作
      type: object
      properties:
        code:
          $ref: "#/components/schemas/code"
        message:
          $ref: "#/components/schemas/message"
      example: {
        code: 403200,
        message: "The current operation only supports owner or admin"
      }

    res_403300:
      description: 当前 API 仅支持 organization 的 member 操作
      type: object
      properties:
        code:
          $ref: "#/components/schemas/code"
        message:
          $ref: "#/components/schemas/message"
      example: {
        code: 403300,
        message: "The Current User Does Not Belong To The Organization!"
      }

    res_403400:
      description: 当前 API 仅支持 organization 的 member 操作
      type: object
      properties:
        code:
          $ref: "#/components/schemas/code"
        message:
          $ref: "#/components/schemas/message"
      example: {
        code: 403400,
        message: "Requests are too frequent, please try again in xx seconds!"
      }

  responses:
    res_500:
      description: 服务器发生错误时的响应
      content:
        application/json:
          schema:
            type: object
            description: 错误响应体
            properties:
              code:
                $ref: "#/components/schemas/code"
              message:
                $ref: "#/components/schemas/message"
            example: {
              code: 500100,
              message: "Something Was Wrong On Server!"
            }

    res_401:
      description: 无法验证用户导致的错误响应
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                example: {
                  code: 401100,
                  message: "JWT not found in the header, access denied!"
                }
              - type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                example: {
                  code: 401100,
                  message: "JWT validation failed, access denied!"
                }

paths:

  /user/auth_code/get:
    post:
      tags:
        - Complete
      summary: "(UPU00001) —— [获取用户更新个人敏感信息的授权码]"
      description: "当用户需要修改个人敏感信息，比如自己的邮箱电话密码的时候需要验证用户身份，并且在执行修改的时候仍需要带上本授权码，验证用户"
      parameters:
        - name: DR-AUTH
          in: header
          required: true
          description: The Json web token (JWT) issued by the backend in the entry page.
          schema:
            type: string
      requestBody:
        required: true
        description: 需要用户的设备标识码
        content:
          application/json:
            schema:
              required:
                - "session_code"
              type: object
              properties:
                session_code:
                  $ref: "#/components/schemas/session_code"
              example: {
                "session_code": "3641e223-efe7-4d42-b67a-3cfb2f0a8b77"
              }

      responses:
        "200":
          description: 系统成功向用户发送用于解锁修改敏感信息的授权码
          content:
            application/json:
              schema:
                description: 需要给前端授权码的剩余过期时间用来同步
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                  data:
                    type: object
                    description: response data payload
                    properties:
                      expiry:
                        type: number
                        description: 当前授权码的过期时间
                example: {
                  "code": 200100,
                  "message": "Get Authorization code successfully!",
                  "data": {
                    "expiry": 35841
                  }
                }

        "400":
          description: 请求参数错误，服务器取消执行
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"
        "403":
          description: 用户请求过快
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_403400"
        "401":
          $ref: "#/components/responses/res_401"
        "500":
          $ref: "#/components/responses/res_500"

  /user/auth_code/verify:
    post:
      tags:
        - Complete
      summary: "(UPU00002) —— [验证用户提供的授权码]"
      description: "当用户的邮箱获取到授权码之后需要在解锁框输入授权码来解锁，本api仅用于前端判断授权码是否有效，来解锁屏蔽"
      parameters:
        - name: DR-AUTH
          in: header
          required: true
          description: The Json web token (JWT) issued by the backend in the entry page.
          schema:
            type: string
      requestBody:
        required: true
        description: 用户需要使用 session_code 和 授权码来解锁前端页面的解锁屏蔽
        content:
          application/json:
            schema:
              required:
                - "session_code"
                - "unlock_code"
              type: object
              properties:
                session_code:
                  $ref: "#/components/schemas/session_code"
                unlock_code:
                  $ref: "#/components/schemas/unlock_code"
              example: {
                "session_code":"3641e223-efe7-4d42-b67a-3cfb2f0a8b77",
                "unlock_code": "015739"
              }

      responses:
        "200":
          description: 用户的授权码验证成功，前端据此解锁用户对敏感信息修改的屏蔽
          content:
            application/json:
              schema:
                description: 前端需要同步本次返回的剩余过期时间
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                  data:
                    type: object
                    description: response data payload
                    properties:
                      expiry:
                        type: number
                        description: 用户授权码剩余的过期时间
                example: {
                  "code": 200100,
                  "message": "User authentication successfully!",
                  "data": {
                    "expiry": 54000
                  }
                }

        "400":
          description: 请求参数错误，服务器取消执行
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"

        "401":
          $ref: "#/components/responses/res_401"
        "500":
          $ref: "#/components/responses/res_500"

  /user/password/update:
    put:
      tags:
        - Complete
      summary: "(UPU00003) —— [用户更新个人登录密码]"
      description: "用户获取授权码之后，才可以对个人密码执行修改，这个时候需要用户在执行更改密码请求的时候依旧带上授权码"
      parameters:
        - name: DR-AUTH
          in: header
          required: true
          description: The Json web token (JWT) issued by the backend in the entry page.
          schema:
            type: string
      requestBody:
        required: true
        description: 用户修改密码的参数需要包含新密码，以及敏感操作授权码, 还有设备标识码
        content:
          application/json:
            schema:
              required:
                - "session_code"
                - "unlock_code"
                - "password"
              type: object
              properties:
                session_code:
                  $ref: "#/components/schemas/session_code"
                unlock_code:
                  $ref: "#/components/schemas/unlock_code"
                password:
                  $ref: "#/components/schemas/user_password"
              example: {
                "session_code":"3641e223-efe7-4d42-b67a-3cfb2f0a8b77",
                "unlock_code":"015739",
                "password":"Abc1233456"
              }

      responses:
        "200":
          description: 用户成功更新密码
          content:
            application/json:
              schema:
                description: 响应体中包含用户操作的成功与否
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                  data:
                    type: object
                    description: response data payload
                    properties:
                      succeeded:
                        $ref: "#/components/schemas/succeed"
                example: {
                  "code": 200100,
                  "message": "Update user password successfully!",
                  "data": {
                    "succeeded": true
                  }
                }

        "400":
          description: 请求参数错误，服务器取消执行
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"

        "401":
          $ref: "#/components/responses/res_401"
        "500":
          $ref: "#/components/responses/res_500"

  /user/email/update/send_code:
    post:
      tags:
        - Complete
      summary: "(UPU00004) —— [更新用户邮箱——发送新邮箱验证码]"
      description: "在更新用户邮箱的时候需要验证用户的邮箱是否是可用的邮箱，本api用于向新邮箱发送一个验证码来验证用户新邮箱是否可用"
      parameters:
        - name: DR-AUTH
          in: header
          required: true
          description: The Json web token (JWT) issued by the backend in the entry page.
          schema:
            type: string
      requestBody:
        required: true
        description: 用户更新邮箱的时候向新邮箱发送验证码，测试邮箱的有效性，需要设识别码
        content:
          application/json:
            schema:
              required:
                - "session_code"
                - "email"
              type: object
              properties:
                session_code:
                  $ref: "#/components/schemas/session_code"
                email:
                  $ref: "#/components/schemas/user_email"
              example: {
                "session_code":"3641e223-efe7-4d42-b67a-3cfb2f0a8b77",
                "email":"jia@gmail.com"
              }

      responses:
        "200":
          description: 系统成功向用户发送更新验证码
          content:
            application/json:
              schema:
                description: 需要返回验证码的过期时间用于前端页面的倒计时同步
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                  data:
                    type: object
                    description: response data payload
                    properties:
                      expiry:
                        type: number
                        description: 用户邮箱验证码的过期时间
                example: {
                  "code": 200100,
                  "message": "Email successfully sent verification code!",
                  "data": {
                    "expiry": 59
                  }
                }

        "400":
          description: 请求参数错误，服务器取消执行
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"
        "403":
          description: 用户请求过快
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_403400"
        "401":
          $ref: "#/components/responses/res_401"
        "500":
          $ref: "#/components/responses/res_500"

  /user/email/update:
    put:
      tags:
        - Complete
      summary: "(UPU00005) —— [更新用户的邮箱]"
      description: "更新用户的邮箱，本api执行验证用户新邮箱验证码和验证通过之后直接执行更新邮箱的操作"
      parameters:
        - name: DR-AUTH
          in: header
          required: true
          description: The Json web token (JWT) issued by the backend in the entry page.
          schema:
            type: string
      requestBody:
        required: true
        description: 用户直接对邮箱执行更新，需要设备识别码，敏感操作授权码，新邮箱验证码以及新的邮箱，
        content:
          application/json:
            schema:
              required:
                - "session_code"
                - "unlock_code"
                - "code"
                - "email"
              type: object
              properties:
                session_code:
                  $ref: "#/components/schemas/session_code"
                unlock_code:
                  $ref: "#/components/schemas/unlock_code"
                code:
                  $ref: "#/components/schemas/verify_code"
                email:
                  $ref: "#/components/schemas/user_email"
              example: {
                "session_code":"3641e223-efe7-4d42-b67a-3cfb2f0a8b77",
                "unlock_code":"015739",
                "code":"767724",
                "email":"jia@gmail.com"
              }

      responses:
        "200":
          description: 用户成功更新邮箱的响应体
          content:
            application/json:
              schema:
                description: 需要有 `succeeded` 标识用户操作的成功与否
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                  data:
                    type: object
                    description: response data payload
                    properties:
                      succeeded:
                        $ref: "#/components/schemas/succeed"
                example: {
                  "code": 200100,
                  "message": "Update user email successfully!",
                  "data": {
                    "succeeded": true
                  }
                }

        "400":
          description: 请求参数错误，服务器取消执行
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"

        "401":
          $ref: "#/components/responses/res_401"
        "500":
          $ref: "#/components/responses/res_500"

  /user/mobile/update/send_code:
    post:
      tags:
        - Complete
      summary: "(UPU00006) —— [更新用户电话——发送电话验证码]"
      description: "在更新用户的电话前，需要验证用户的新电话是否可用，本api将会向用户的新电话号码发送一个验证码，来测试用户的新电话是否可用"
      parameters:
        - name: DR-AUTH
          in: header
          required: true
          description: The Json web token (JWT) issued by the backend in the entry page.
          schema:
            type: string
      requestBody:
        required: true
        description: 用户更新电话，需要先向新电话发送验证码验证用户的新电话是否可用
        content:
          application/json:
            schema:
              required:
                - "session_code"
                - "mobile"
              type: object
              properties:
                session_code:
                  $ref: "#/components/schemas/session_code"
                mobile:
                  $ref: "#/components/schemas/user_mobile"
              example: {
                "session_code":"3641e223-efe7-4d42-b67a-3cfb2f0a8b77",
                "mobile": {
                  "country":"61",
                  "number":"15071594541"
                }
              }

      responses:
        "200":
          description: 系统成功向用户的新电话发送验证码短信
          content:
            application/json:
              schema:
                description: 成功发送则需要返回用户验证码的过期时间
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                  data:
                    type: object
                    description: response data payload
                    properties:
                      expiry:
                        type: number
                        description: 用户短信验证码的剩余过期时间
                example: {
                  "code": 200100,
                  "message": "Mobile successfully sent verification code!",
                  "data": {
                    "expiry": 58
                  }
                }

        "400":
          description: 请求参数错误，服务器取消执行
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"

        "401":
          $ref: "#/components/responses/res_401"
        "403":
          description: 用户请求过快
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_403400"
        "500":
          $ref: "#/components/responses/res_500"

  /user/mobile/update:
    put:
      tags:
        - Complete
      summary: "(UPU00007) —— [更新用户电话]"
      description: "当用户收到新电话的验证码之后，就可以携带着验证码对电话号码执行修改，在修改的时候依然需要验证用户的验证码以及敏感操作授权码是否有效"
      parameters:
        - name: DR-AUTH
          in: header
          required: true
          description: The Json web token (JWT) issued by the backend in the entry page.
          schema:
            type: string
      requestBody:
        required: true
        description: 用户执行电话号码的更新，需要设备识别码，敏感操作授权码，电话短信验证码以及电话号码
        content:
          application/json:
            schema:
              required:
                - "session_code"
                - "unlock_code"
                - "code"
                - "mobile"
              type: object
              properties:
                session_code:
                  $ref: "#/components/schemas/session_code"
                unlock_code:
                  $ref: "#/components/schemas/unlock_code"
                code:
                  $ref: "#/components/schemas/verify_code"
                mobile:
                  $ref: "#/components/schemas/user_mobile"
              example: {
                "session_code":"3641e223-efe7-4d42-b67a-3cfb2f0a8b77",
                "unlock_code":"066126",
                "code":"345435",
                "mobile":{
                  "country":"61",
                  "number":"15071594541"
                }
              }

      responses:
        "200":
          description: 用户更新电话成功
          content:
            application/json:
              schema:
                description: 需要返回更新成功与否的标识
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                  data:
                    type: object
                    description: response data payload
                    properties:
                      succeeded:
                        $ref: "#/components/schemas/succeed"
                example: {
                  "code": 200100,
                  "message": "Update user mobile successfully!",
                  "data": {
                    "succeeded": true
                  }
                }

        "400":
          description: 请求参数错误，服务器取消执行
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"

        "401":
          $ref: "#/components/responses/res_401"
        "500":
          $ref: "#/components/responses/res_500"

  /user/avatar/update:
    post:
      tags:
        - Complete
      summary: "(UPU00008) —— [更新用户的新头像]"
      description: "用户上传并设置新头像，用户选择图片之后，需要将用户的新头像上传到 aws 上，并将头像的访问地址更新到数据库用户的头像中"
      parameters:
        - name: DR-AUTH
          in: header
          required: true
          description: The Json web token (JWT) issued by the backend in the entry page.
          schema:
            type: string
      requestBody:
        required: true
        description: 用户选择文件将会以二进制流存放至 aws
        content:
          multipart/form-data:
            schema:
              required:
                - "avatar"
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: this is file binary code
      responses:
        "200":
          description: 用户更新 avatar 成功
          content:
            application/json:
              schema:
                description: succeeded 显示用户上传与更新的结果，并且返回全新的avatar_url供前端更新
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                  data:
                    type: object
                    description: response data payload
                    properties:
                      succeeded:
                        $ref: "#/components/schemas/succeed"
                      new_avatar:
                        $ref: "#/components/schemas/user_avatar"
                example: {
                  "code": 200100,
                  "message": "User avatar has been updated!",
                  "data": {
                    "succeeded": true,
                    "new_avatar": "https://xxxxx.sss/xsaxsa.png"
                  }
                }

        "400":
          description: 请求参数错误，服务器取消执行
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"
        "401":
          $ref: "#/components/responses/res_401"
        "500":
          $ref: "#/components/responses/res_500"

  /user/base_info/update:
    put:
      tags:
        - Complete
      summary: "(UPU00009) —— [更新用户的基础信息，包含真实姓名，性别和出生年月]"
      description: "更新用户的基本信息，其中前端按需传输需要修改的属性，没有作改动的属性不需要传入，后端按照制定属性进行更新"
      parameters:
        - name: DR-AUTH
          in: header
          required: true
          description: The Json web token (JWT) issued by the backend in the entry page.
          schema:
            type: string
      requestBody:
        required: true
        description: 用户需要填写最少一个新的用户属性，不可每个属性全部都为空
        content:
          application/json:
            schema:
              required:
                - "real_name"
                - "birthday"
                - "gender"
              type: object
              properties:
                real_name:
                  $ref: "#/components/schemas/user_real_name"
                birthday:
                  $ref: "#/components/schemas/user_birthday"
                gender:
                  $ref: "#/components/schemas/user_gender"
              example: {
                "real_name": {
                  "first_name": "家胜",
                  "middle_name": "",
                  "last_name": "井"
                },
                "gender":"male",
                "birthday": "1634800596230"
              }

      responses:
        "200":
          description: 更新用户简单信息成功响应
          content:
            application/json:
              schema:
                description: 需要包含用户更新的结果标识
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                  data:
                    type: object
                    description: response data payload
                    properties:
                      succeeded:
                        $ref: "#/components/schemas/succeed"
                example: {
                  "code": 200100,
                  "message": "Update user base info successfully!",
                  "data": {
                    "succeeded": true
                  }
                }

        "400":
          description: 请求参数错误，服务器取消执行
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"

        "401":
          $ref: "#/components/responses/res_401"
        "500":
          $ref: "#/components/responses/res_500"



