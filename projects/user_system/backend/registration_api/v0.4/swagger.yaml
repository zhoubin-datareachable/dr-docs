openapi: 3.0.3

info:
  version: 0.2.5
  title: Signup APIs
  description: >-
    This document contains the RESTful APIs provided by the registration api servers.
    <br/>
    **Project GitHub Repos:**
      - [Registration API repo](https://github.com/dataReachable/dr_Back_UserSystemSignup)
  contact:
    name: Backend Team
    email: jiasheng.jing@datareachable.com

servers:
  - url: "https://api.dev.datareachable.net/user/signup/v1"
    description: Sydney Development Cluster
paths:
  /register/code/request:
    post:
      tags:
        - 获取验证码
      summary: 获取一个注册使用的邮箱验证码
      description: 本 API 用于在用户注册的时候向用户的邮箱发送一个验证码，并且在该API当中需要验证用户输入的邮箱是否已经被占用.
      requestBody:
        required: true
        description: Client-generated session code (discriminator) and an external identity to send a verification code to.
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/CodeChallengeRequestEmail"
      responses:
        "200":
          description: Code sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSendSuccess"
        "400":
          description: 用户不被允许向已经注册的邮箱发送验证码
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/BadFields"
                  - $ref: "#/components/schemas/TakenIdentity"
        "429":
          $ref: "#/components/responses/RateLimit"
        "500":
          description: Internal server errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericBackendError"

  /register/code/verify:
    post:
      tags:
        - 验证邮箱验证码
      summary: 验证邮箱验证码
      description: This API accepts a session code and an external identity such as email and mobile. Then sends the user a verification code for them to authenticate when signing up.
      requestBody:
        required: true
        description: Client-generated session code (discriminator) and a verification code from the specified external identity.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeVerifyRequest"
      responses:
        "200":
          description: Code verified.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeVerifySuccess"
        "400":
          description: Failed to verify code.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/BadFields"
                  - $ref: "#/components/schemas/CodeVerifyFailure"
        "429":
          $ref: "#/components/responses/RateLimit"
        "500":
          description: Internal server errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericBackendError"

  /register/check_availability:
    post:
      tags:
        - 检查注册的用户名是否可用
      summary: 检查注册的用户名是否可用
      description: >-
        This endpoint does not require a `sessionCode` field. Nonetheless, the field is tolerated by the backend.
        The default ratelimit for this endpoint is 6 requests in a 60 second rolling [(sliding) window.](https://cloud.google.com/solutions/rate-limiting-strategies-techniques#techniques-enforcing-rate-limits)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckAvailabilityUsername"
      responses:
        "200":
          description: Check success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvailabilityCheckResult"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/BadFields"
                  - $ref: "#/components/schemas/TakenUsername"
        "429":
          $ref: "#/components/responses/RateLimit"
        "500":
          description: Internal server errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericBackendError"

  /register:
    post:
      tags:
        - 执行注册一个新用户
      summary: 执行注册一个新用户
      description:  This API accepts a session code on top of all the user-provided fields. The session code should already be used to create a 2-factor authentication code with the request/verify endpoints.<br>register后面的参数为当用户属于被邀请类型的用户时，需要将注册链接后面的参数添加到注册请求后面，务必保证所有参数完全和地址栏中一致，不然可能会导致注册验证无法通过！
      requestBody:
        required: true
        description: Register with either a mobile or email to begin with.
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/RegistrationRequestEmail"
      responses:
        "200":
          description: Registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterSuccess"
        "400":
          description: Failed to register
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/BadFields"
                  - $ref: "#/components/schemas/FailureBadPassword"
                  - $ref: "#/components/schemas/FailureUsernameTaken"
                  - $ref: "#/components/schemas/FailureIdentityTaken"
                  - $ref: "#/components/schemas/FailureIdentityUnverified"
        "429":
          $ref: "#/components/responses/RateLimit"
        "500":
          description: Internal server errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericBackendError"

  /register/code/forgot_password/verify_code/send:
    post:
      tags:
        - 向用户的邮箱发送一条用于重置用户密码的验证码
      summary: 向用户的邮箱发送一条用于重置用户密码的验证码
      description: 向用户的邮箱发送一条用于重置用户密码的验证码
      requestBody:
        required: true
        description: 需要用户的设备识别码，以及用户的邮箱.
        content:
          application/json:
            schema:
              required:
                - session_code
                - email
              type: object
              properties:
                session_code:
                  type: string
                  description: 前端发送的设备识别码
                email:
                  $ref: "#/components/schemas/user_email"
              example: {
                "session_code":"a2f5051d-375c-40dd-b236-415f5472ac67",
                "email":"j_jiasheng@qq.com"
              }


      responses:
        "200":
          description: 验证码发送成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                example: {
                  "code": 200100,
                  "message": "Verification code sent! Please check your email!"
                }
        "400":
          description: Failed to reset password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res_400100"
        "429":
          $ref: "#/components/responses/RateLimit"
        "500":
          description: Internal server errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericBackendError"

  /register/code/forgot_password/verify_code/verify:
    post:
      tags:
        - 验证用户用于重置密码的验证码
      summary: 验证用户用于重置密码的验证码
      description: 当用户接受到验证码的时候需要调用此API`消费`验证码，才可以继续调用重置密码的API执行密码重置
      requestBody:
        required: true
        description: 需要获取验证码的时候的设备识别码和验证码.
        content:
          application/json:
            schema:
              required:
                - session_code
                - code
                - email
              type: object
              properties:
                session_code:
                  type: string
                  description: 前端传入的设备识别码
                code:
                  $ref: "#/components/schemas/Code"
                email:
                  $ref: "#/components/schemas/user_email"
              example: {
                "session_code":"a2f5051d-375c-40dd-b236-415f5472ac67",
                "code":"789551",
                "email":"j_jiasheng@qq.com"
              }

      responses:
        "200":
          description: 验证成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    $ref: "#/components/schemas/code"
                  message:
                    $ref: "#/components/schemas/message"
                example: {
                  "code": 200100,
                  "message": "You've successfully verified your email."
                }
        "400":
          description: Failed to Verify the verification code
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"

        "500":
          description: Internal server errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericBackendError"

  /password/reset:
    put:
      tags:
        - 用户执行密码重置
      summary: 用户执行密码重置
      description: 这个 API 用于用户忘记登录密码，使用用户的邮箱重置密码
      requestBody:
        required: true
        description: Register with either a mobile or email to begin with.
        content:
          application/json:
            schema:
              required:
                - session_code
                - code
                - email
                - password
              type: object
              properties:
                session_code:
                  type: string
                  description: 前端设备的识别码，用于禁止多设备验证
                code:
                  $ref: "#/components/schemas/Code"
                email:
                  $ref: "#/components/schemas/Email"
                password:
                  $ref: "#/components/schemas/Password"
            example: {
              "session_code":"a2f5051d-375c-40dd-b236-415f5472ac67",
              "code":"789551",
              "email":"j_jiasheng@qq.com",
              "password":"Aaa123"
            }

      responses:
        "200":
          description: 重置成功
          content:
            application/json:
              schema:
                description: 重置成功响应
                type: object
                properties:
                  code:
                    type: string
                    description: 后端自定义的响应码
                  message:
                    type: string
                    description: 响应结果的简要描述
                  data:
                    type: object
                    description: response data payload
                    properties:
                      succeeded:
                        type: boolean
                        description: 密码重置成功的标识
                example: {
                  "code": 200100,
                  "message": "Reset User Password successfully!",
                  "data": {
                    "succeeded": true
                  }
                }
        "400":
          description: Failed to reset password
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/res_400100"

        "500":
          description: Internal server errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericBackendError"


components:
  responses:
    RateLimit:
      description: >-
        Too many requests.


        The rate limit is controlled by a [sliding window](https://cloud.google.com/solutions/rate-limiting-strategies-techniques#techniques-enforcing-rate-limits) of 60 seconds. Each endpoint (or group thereof) defines separate request caps within these bounds.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RateLimit"
  schemas:
    code:
      type: string
      description: 平台自定义的请求响应码 6 位 number 组成
    succeeded:
      type: boolean
      description: 前端请求涉及到 update data 的时候需要返回的响应字段， 代表着 update 的结果， false 代表更新失败， true 代表更新成功.
    message:
      type: string
      description: 后端对请求响应结果的简要信息.
    organization_id:
      type: string
      description: organization 的 18 位 uuid
    organization_dri:
      type: string
      description: organization 的全局资源定位符
    organization_name:
      type: string
      description: organization 的名称，全局唯一且不能包含特殊字符(.?!除外)
    organization_email:
      type: string
      description: organization 的联系方式u之一——邮箱，初始邮箱一般都是该 organization 的创建者的邮箱，后期支持更改！
    organization_phone:
      type: object
      description: organization 的联系方式之一——电话
      properties:
        country:
          type: number
          description: 电话号码前的国家代码 例如中国[61]
        number:
          type: string
          description: 电话号码后的号码段
    organization_description:
      type: string
      description: organization 的简介，用于对 organization 进行简要的说明与介绍的文字性内容
    organization_status:
      type: string
      description: organization 的状态值，可选的有 private 和 public， 当为 private 的时候，该 organization 对外显示信息不可见， public 则对外可见，可被搜索到.
    organization_logo:
      type: string
      description: 一个可以被直接加载出来的 organization 的 LOGO AWS网络图片的地址
    talent_group_name:
      type: string
      description: talent_group 的名称， 不能包含特殊字符(.?!除外)，并且需要在同一个 organization 内部不重复
    talent_group_dri:
      type: string
      description: talent_group 的全局资源定位符， uuid 部分包含和其所在的 organization 的 uuid 并追加 6 位私有的 uuid
    talent_group_status:
      type: string
      description: talent_group 的状态描述， 可选值为 private 和 public ，同样，这个状态也标志着本 talent_group 在某些情景下的对外可见情况
    user_dri:
      type: string
      description: system user 的全局资源定位符
    user_name:
      type: string
      description: system user 的名称,在系统中需要全局唯一，并且不能包含特殊字符(.?!除外)，是登录系统凭据的一部分
    user_password:
      type: string
      description: system user 的登录密码， 目前仅仅用作与 user_name 搭配登录系统使用，且需要包含部分特殊字符等强校验规则，用于确保密码强度，在数据库中对密码进行加密(存储密文)保护用户信息
    user_gender:
      type: string
      description: system user 的性别，目前未作设定，尚待确认
    user_birthday:
      type: string
      description: system user 的生日，为日期格式字符串，目前尚未作出相关规范
    user_email:
      type: string
      description: system user 的邮箱地址，默认为用户在系统中首次注册的时候使用的邮箱，此项在后续的系统中一定会存在，并且支持用户后期更改
    user_mobile:
      type: string
      description: system user 的联系方式之一——电话，该项在用户注册的时候不属于强制补全项， 属于用户的后期补充项，可以为 null.
    user_avatar:
      type: string
      description: system user 的头像， 当用户上传头像到aws之后，用户的头像可加载的网络图片地址，在用户没有上传头像之前默认为 null ，由前端根据 organization name 使用组建生成字母头像.
    invt_dri:
      type: string
      description: 邀请记录的全局资源定位符
    role:
      type: string
      description: system user 相对于 organization 来说，用户所处的用户组(旧时称角色)
    invt_time:
      type: string
      description: 一条邀请记录被重复触发邀请的次数(可以理解为用户被重复邀请的次数)
    invt_status:
      type: string
      description: 一条邀请记录的状态，针对于邀请方和被邀请方两个角度可选值：canceled/accepted/pending/refused
    #=======================
    res_400100:
      description: "获取 organization descriptions 参数错误响应"
      type: object
      properties:
        code:
          $ref: "#/components/schemas/code"
        message:
          $ref: "#/components/schemas/message"
      example:
        {
          code: 400100,
          message: "xxx 是必填字段，不可为空！"
        }

    res_403100:
      description: 当前 API 仅支持 organization 的 owner 操作
      type: object
      properties:
        code:
          $ref: "#/components/schemas/code"
        message:
          $ref: "#/components/schemas/message"
      example: {
        code: 403100,
        message: "The current operation only supports owner"
      }

    res_403200:
      description: 当前 API 仅支持 organization 的 owner 操作
      type: object
      properties:
        code:
          $ref: "#/components/schemas/code"
        message:
          $ref: "#/components/schemas/message"
      example: {
        code: 403200,
        message: "The current operation only supports owner or admin"
      }

    res_403300:
      description: 当前 API 仅支持 organization 的 member 操作
      type: object
      properties:
        code:
          $ref: "#/components/schemas/code"
        message:
          $ref: "#/components/schemas/message"
      example: {
        code: 403300,
        message: "The Current User Does Not Belong To The Organization!"
      }
    SessionCodeAttachedRequest:
      type: object
      properties:
        sessionCode:
          type: string
          description: >-
            UUID of the client which requested the code.
            This UUID is generated by the client, supposedly randomly.
            It will only be used as a sharding/discriminating mechanism.
            Duplications in UUID is not only tolerated, but expected by the backend.
            Lower-case UUIDs that only use the `-` separator will be the only accepted variant.


            The client is expected to keep the same `sessionCode` in any given usage flow that involves the authentication code subsystem.
    GenericResponse:
      type: object
      properties:
        code:
          type: number
          description: "A 6-digit error code designated by the spreadsheet."
        message:
          type: string
          description: "A user-friendly message describing the status of the response."
    Mobile:
      type: object
      description: Mobile which the user would like to validate against.
      properties:
        country:
          type: string
          description: The country code of the number we're sending to.
        number:
          type: string
          description: >-
            The actual mobile number of the user. When this is concatenated with `country`, the number should be an addressable international number.
            Eg. for the Australian mobile number 0420 696 969, the country code would be 61, and the number would be "420 696 969".
            When they're concatenated together, they form +61 420 696 969, which is the correct format of an international number.


            Spaces will not be tolerated or normalized by the backend. Please remove any spaces in the numbers. eg. `0420 696 969` &rarr; `0420696969`
    Code:
      type: number
      description: By the time of registration validation when contact was to get the verification code
    Email:
      type: string
      description: A valid email address that is at or under 128 characters in length, including any quotation marks.
    CodeChallengeRequestMobile:
      deprecated: true
      allOf:
        - $ref: "#/components/schemas/SessionCodeAttachedRequest"
        - type: object
          properties:
            mobile:
              $ref: "#/components/schemas/Mobile"
      example:
        {
          sessionCode: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          mobile: {
            country: "61",
            number: "420 696 969"
          }
        }
    CodeChallengeRequestEmail:
      allOf:
        - $ref: "#/components/schemas/SessionCodeAttachedRequest"
        - type: object
          properties:
            email:
              $ref: "#/components/schemas/Email"
      example:
        {
          sessionCode: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          email: "user@example.com"
        }
    CodeSendSuccess:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 200000,
          message: "Verification code sent! Please check your mobile/email."
        }
    BadFields:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 400001,
          message: "The error of the fields will be described here.",
        }
    TakenIdentity:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 400002,
          message: "Your mobile/email is already taken."
        }
    WrongRequestMethodRes:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 405000,
          message: "You're using the completely wrong HTTP method."
        }
    RateLimit:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 429000,
          message: "You've made too many requests for new codes. Please wait a minute."
        }
    GenericBackendError:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 500000,
          message: "A user-friendly description of the error."
        }
    CodeVerifyRequest:
      allOf:
        - $ref: "#/components/schemas/SessionCodeAttachedRequest"
        - type: object
          properties:
            code:
              type: string
              description: The verification code the user is now required to enter.
      example:
        {
          sessionCode: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          code: "123456"
        }
    CodeVerifySuccess:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 200000,
          message: "You've successfully verified your mobile/email. Please complete the other fields to register."
        }
    CodeVerifyFailure:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 400002,
          message: "Please double check the code you've entered is correct. Please request another code if it's still not working."
        }
    CodeVerifyEmailLink:
      allOf:
        - $ref: "#/components/schemas/SessionCodeAttachedRequest"
        - type: object
          properties:
            verificationCode:
              type: string
              description: The confirmation code that the server requested.
    CheckAvailabilityUsername:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
    AvailabilityCheckResultField:
      type: boolean
      description: >-
        A `true` response means that the data sent in this field is **not** in our database, and therefore available for use.


        The `false` response field has been remapped to code `400002`, please check the 400 response schemas.
    AvailabilityCheckResult:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
        - type: object
          properties:
            data:
              type: object
              description: The returned fields correspond to the fields in the API request. If a field didn't exist in the API request, then it won't be in the response.
              properties:
                username:
                  $ref: "#/components/schemas/AvailabilityCheckResultField"
      example:
        {
          code: 200000,
          message: "Checks succeeded"
        }
    TakenUsername:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 400002,
          message: "That username is already taken."
        }
    Username:
      type: string
      description: >-
        A unique, immutable username that the client can choose to use for their account. Subject to the following limitations:
          - Between 7 and 20 characters, inclusive of both.
          - A username with a different stylization (eg. capitalization) doesn't already exist.
          - Can only start with a letter
          - Can contain the following characters
            - Lowercase letters
            - Capital letters
            - Numbers
            - Dots (`.`)
            - Dashes (`-`)
            - Underscores (`_`)

        This RegEx is recommended: `^[A-Za-z][A-Za-z0-9._-]{6,19}$`
    Password:
      type: string
      description: >-
        A string that is between 8 and 32 characters in length, inclusive of both. Must contain all of the following
          - Lowercase letters
          - Uppercase letters
          - Digits
          - Special characters (anything that's not letters or digits)


        The string SHOULD NOT be longer than 72 bytes in length when encoded in UTF-8 due to [security concerns](https://github.com/kelektiv/node.bcrypt.js#security-issues-and-concerns). However, the backend will not check for this.
    RegistrationRequestBase:
      allOf:
        - $ref: "#/components/schemas/SessionCodeAttachedRequest"
        - type: object
          properties:
            username:
              $ref: "#/components/schemas/Username"
            password:
              $ref: "#/components/schemas/Password"
    RegistrationRequestMobile:
      allOf:
        - $ref: "#/components/schemas/RegistrationRequestBase"
        - type: object
          properties:
            mobile:
              $ref: "#/components/schemas/Mobile"
            code:
              $ref: "#/components/schemas/Code"
      example:
        {
          sessionCode: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          code: "123456",
          mobile: {
            country: "61",
            number: "420 696 969"
          },
          username: "matthew",
          password: "Password1!"
        }
    RegistrationRequestEmail:
      allOf:
        - $ref: "#/components/schemas/RegistrationRequestBase"
        - type: object
          properties:
            email:
              $ref: "#/components/schemas/Email"
            code:
              $ref: "#/components/schemas/Code"
      example:
        {
          sessionCode: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          code: "123456",
          email: "user@example.com",
          username: "matthew",
          password: "Password1!"
        }
    RegisterSuccess:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 200000,
          message: "You've successfully registered, welcome to dataReachable!"
        }
    FailureBadPassword:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 400002,
          message: "Password must be 8-32 bytes in length and contain the following: ..."
        }
    FailureUsernameTaken:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 400003,
          message: "Username is already taken."
        }
    FailureIdentityTaken:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 400004,
          message: "Mobile/email is already taken."
        }
    FailureIdentityUnverified:
      allOf:
        - $ref: "#/components/schemas/GenericResponse"
      example:
        {
          code: 400005,
          message: "Please verify your mobile/email first."
        }
